#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## This file gets sourced by msgdispatcher and msgprogressbar.
## Therefore the error_handler function has been already load.

fallbacks() {
   trap "error_handler" ERR

   if [ "$DISPLAY" = "" ]; then
      no_x="1"
   fi

   ## Check if zenity is installed.
   ## - This is not the case for cli users,
   ##   who removed zenity or custom builds which never had zenity installed.
   if [ "$(command -v "zenity")" = "" ] || [ "$DISPLAY" = "" ]; then
      ## zenity is not installed or no X server running.
      zenity() {
         ## dummy
         true
      }
   fi

   if [ "$(command -v "wmctrl")" = "" ] || [ "$DISPLAY" = "" ]; then
      ## wmctrl is not installed or no X server running.
      wmctrl() {
         ## dummy
         true
      }
   fi

   if [ "$DISPLAY" = "" ]; then
      ## No X server running.
      kdialog() {
         ## dummy
         true
      }
      notify-send() {
         ## dummy
         true
      }
   fi

   if [ "$display" = "" ]; then
      display="$DISPLAY"
   fi
}

output_wait_for_window() {
   ## also used by whonix-autosetup

   trap "error_handler" ERR

   local title="${1+"$@"}"

   sleep .5 &
   wait "$!" || true

   ## TODO
   if [ "$autostart" = "1" ]; then
      ## Runs in background anyway, waiting a bit longer does not hurt.
      local max_wait="120"
   else
      local max_wait="60"
   fi

   local counter
   counter="0"

   while true; do
      ## "2>/dev/null" to hide output "Can not open display.", when not yet available.
      local temp
      ## Getting a list of all existing windows.
      temp="$(wmctrl -l 2>/dev/null)" || true

      local grep_exit_code
      grep_exit_code="0"
      echo "$temp" | grep --quiet "$title" || { grep_exit_code="$?" ; true; };

      if [ "$grep_exit_code" = "0" ]; then
         break
      fi

      sleep "1" &
      wait "$!" || true

      counter="$(( $counter + 1 ))"

      if [ "$counter" -ge "$max_wait" ]; then
         true "Giving up on wmctrl. Break."
         break
      fi
   done
}

output_wmctrl_move_window_to_left_top() {
   ## Move windows to the left top, so they do not overlap.
   ## Thanks to: http://user.cavenet.com/rolandl/timer.txt

   trap "error_handler" ERR

   if [ "$no_x" = "1" ]; then
      true "no_x is set to 1, do not try wmctrl, return 0 from output_wmctrl."
      return 0
   fi

   local title="${1+"$@"}"

   output_wait_for_window "$title"

   ## Wait a bit longer. Otherwise it might still fail in some cases.
   sleep "1" &
   wait "$!" || true

   ## Move windows to the left top.
   wmctrl -r "$title" -e 0,0,0,-1,-1 >/dev/null 2>/dev/null || true
}

output_wmctrl_maximize_window() {
   trap "error_handler" ERR

   if [ "$no_x" = "1" ]; then
      true "no_x is set to 1, do not try wmctrl, return 0 from output_wmctrl."
      return 0
   fi

   local title="${1+"$@"}"

   output_wait_for_window "$title"

   if [ "$progressbar" = "1" ]; then
      true "Not maximizing progress bar."
   else
      ## Wait a bit longer. Otherwise it might still fail in some cases.
      sleep "1" &
      wait "$!" || true

      ## Maximize window.
      wmctrl -r "$title" -b add,maximized_vert,maximized_horz >/dev/null 2>/dev/null || true
   fi
}
