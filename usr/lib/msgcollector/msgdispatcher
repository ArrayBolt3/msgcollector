#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
set -o pipefail

scriptname="$(basename $0)"

error_handler() {
   local exit_code="$?"

   local msg="\
###############################################################################
## $scriptname script bug.
## No panic. Nothing is broken. Just some rare condition has been hit.
## Try again later. There is likely a solution for this problem.
## Please see Whonix News, Whonix Blog and Whonix User Help Forum.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
###############################################################################\
"
   echo "$msg"
   mkdir --parents ~/".whonix"
   echo "$scriptname: BASH_COMMAND: $BASH_COMMAND | exit_code: $exit_code" > ~/".whonix/msgdispatcher-error.log"
   true
}

trap "error_handler" ERR

trap_sighup() {
   set -x
   true
   exit 0
}

trap "trap_sighup" SIGHUP

parse_cmd_options() {
   trap "error_handler" ERR

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while true; do
       case $1 in
           --verbose)
               set -x
               verbose="1"
               shift
               ;;
           --cli)
               cli="1"
               shift
               ;;
           --x)
               x="1"
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$scriptname unknown option: $type" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done
}

write_own_pid() {
   if [ "$cli" = "1" ]; then
      echo "$$" > "/var/run/msgcollector/msgdispatcher_pidcli"
   elif [ "$x" = "1" ]; then
      echo "$$" > "/var/run/msgcollector/msgdispatcher_pidx"
   else
      echo "$$" > "/var/run/msgcollector/msgdispatcher_piderror"
      exit 3
   fi
}

## {{ Write to tty1. Using simple lock mechanism so messages from "write" do not get mixed up.
output_write_to_tty() {
   trap "error_handler" ERR

   local lockfile
   lockfile="/var/run/msgcollector/write_lock"

   (
      trap "error_handler" ERR

      ## Use flock to wait up to 60 seconds to acquire an exclusive lock.
      ## fd 200, see man flock
      flock --wait 60 --exclusive 200

      echo "${1+"$@"}
$feel_free_to_press_enter_msg" | write user tty1 2>/dev/null || true

      ## Hold the write lock up to 10 seconds.
      sleep 10 &
      wait "$!"

   ) 200>"$lockfile" &
   ## fd 200, see man flock
}
## }}

## {{ Small wrapper to use either kdialog, notify-send or nothing.
passive_popup_tool() {
   trap "error_handler" ERR

   ## $1 - time
   ## $2 - text

   ## check if kdialog, notify-send or no passive popup tool is installed
   ## - that is not the case for CLI Custom-Workstation users
   ## - that may not be the case for Gnome users
   if [ ! "$(command -v "kdialog")" = "" ] ; then
      kdialog --title "$identifier" --passivepopup "$2" "$1"
   elif [ ! "$(command -v "notify-send")" = "" ] ; then
      notify-send --expire-time "$1" "$identifier" "$2"
   else
      true
   fi
}
## }}

dispatch_cli() {
   trap "error_handler" ERR

   if [ -f "/var/run/msgcollector/${identifier}.parenttty" ]; then
      local parenttty
      parenttty="$(cat "/var/run/msgcollector/${identifier}.parenttty")"
      if [ "$parenttty" = "/dev/tty1" ]; then
         ## When for example whonixcheck was run in tty1, then messages were
         ## already echoed by msgcollector. No need to dispatch them again.
         true "Skipping, because parenttty is /dev/tty1."
         return 0
      fi
   fi

   echo "$1"
}

dispatch_x_active() {
   trap "error_handler" ERR

   if [ "$display" = "" ]; then
      display=":0"
   fi

   if [ -f "/var/run/msgcollector/${identifier}.lefttop" ]; then
      local lefttop
      lefttop="1"
   fi

   if [ -f "/var/run/msgcollector/${identifier}.icon" ]; then
      local icon
      icon="$(cat "/var/run/msgcollector/${identifier}.icon")"
   else
      ## Fallback.
      local icon
      icon="/usr/share/icons/whonix/whonix.ico"
   fi

   ## "sudo -u user" is required, because /etc/init.d/sdwdate runs
   ## as root. When making changes, test this using:
   ## sudo touch /var/lib/whonix/sdw_error
   ## sudo service sdwdate restart
   sudo -u user zenity \
      --display="$display" \
      --height=600 \
      --width=800 \
      --timeout 86400 \
      --no-markup \
      --window-icon "$icon" \
      --title="$title" \
      "--$type" \
        --text "$msg" \
      >/dev/null 2>/dev/null &

   if [ "$lefttop" = "1" ]; then
      ## provided by /usr/lib/msgcollector/msgwmctrl
      output_wmctrl_move_window_to_left_top "$title"
      ## Not in Debian Wheezy, due to a bug in zenity resulting in no visible
      ## text. Can be re-enabled in Debian Jessie.
      #output_wmctrl_maximize_window "$title"
   fi
}

dispatch_x_passive() {
   trap "error_handler" ERR

   passive_popup_tool "20" "$msg"
}

main_function() {
   trap "error_handler" ERR

   local identifier

   while true; do
      for identifier in "whonixcheck" "timesync" "torbrowser"; do
         if [ "$x" = "1" ]; then

            local progressbaridx_file
            ## The * matches progressbaridx.
            for progressbaridx_file in /var/run/msgcollector/${identifier}.*.progressbarx.done; do
               first_two="${progressbaridx_file%.*.*}"
               progressbaridx=${first_two##*.}
               if [ -f "/var/run/msgcollector/${identifier}.${progressbaridx}.progressbarx.done" ]; then
                  if [ -f "/var/run/msgcollector/${identifier}.${progressbaridx}.progressbarx" ]; then
                     if [ -f "/var/run/msgcollector/${identifier}.${progressbaridx}.progressbarx.animate" ]; then
                        rm --force "/var/run/msgcollector/${identifier}.${progressbaridx}.progressbarx.animate"
                        animate="--animate"
                     else
                        unset animate
                     fi
                     if [ "$verbose" = "1" ]; then
                        bash -x /usr/lib/msgcollector/msgprogressbar --identifier "$identifier" --progressbaridx "${progressbaridx}" --verbose $animate
                     else
                        /usr/lib/msgcollector/msgprogressbar --identifier "$identifier" --progressbaridx "${progressbaridx}" $animate &
                     fi
                     unset animate
                     rm --force "/var/run/msgcollector/${identifier}.${progressbaridx}.progressbarx.done"
                  else
                     rm --force "/var/run/msgcollector/${identifier}.${progressbaridx}.progressbarx.done"
                  fi
               fi
            done
            unset progressbaridx_file

            if [ -f "/var/run/msgcollector/${identifier}.waitmessagex.done" ]; then
               if [ -f "/var/run/msgcollector/${identifier}.waitmessagex" ]; then
                  msg="$(cat "/var/run/msgcollector/${identifier}.waitmessagex")"
                  title="$(cat "/var/run/msgcollector/${identifier}.titlex")"
                  type="$(cat "/var/run/msgcollector/${identifier}.typex")"
                  dispatch_x_passive "$type" "$msg"
                  rm --force "/var/run/msgcollector/${identifier}.waitmessagex.done"
                  rm --force "/var/run/msgcollector/${identifier}.waitmessagex"
               else
                  rm --force "/var/run/msgcollector/${identifier}.waitmessagex.done"
               fi
            fi
            if [ -f "/var/run/msgcollector/${identifier}.messagex.done" ]; then
               if [ -f "/var/run/msgcollector/${identifier}.messagex" ]; then
                  msg="$(cat "/var/run/msgcollector/${identifier}.messagex")"
                  title="$(cat "/var/run/msgcollector/${identifier}.titlex")"
                  type="$(cat "/var/run/msgcollector/${identifier}.typex")"
                  dispatch_x_active "$type" "$msg"
                  rm --force "/var/run/msgcollector/${identifier}.messagex.done"
                  rm --force "/var/run/msgcollector/${identifier}.messagex"
                  rm --force "/var/run/msgcollector/${identifier}.lefttop"
               else
                  ## Not using rm outside the if, to prevent race conditions.
                  ## Not always using rm, without if to prevent forking.
                  rm --force "/var/run/msgcollector/${identifier}.messagex.done"
               fi
            fi
            if [ -f "/var/run/msgcollector/${identifier}.passivepopupqueuex.done" ]; then
               if [ -f "/var/run/msgcollector/${identifier}.passivepopupqueuex" ]; then
                  msg="$(cat "/var/run/msgcollector/${identifier}.passivepopupqueuex")"
                  title="$(cat "/var/run/msgcollector/${identifier}.titlex")"
                  type="$(cat "/var/run/msgcollector/${identifier}.typex")"
                  if [ -f "/var/run/msgcollector/${identifier}.forceactive" ]; then
                     dispatch_x_active "$type" "$msg"
                  else
                     dispatch_x_passive "$type" "$msg"
                  fi
                  rm --force "/var/run/msgcollector/${identifier}.forceactive"
                  rm --force "/var/run/msgcollector/${identifier}.passivepopupqueuex.done"
                  rm --force "/var/run/msgcollector/${identifier}.passivepopupqueuex"
               else
                  rm --force "/var/run/msgcollector/${identifier}.passivepopupqueuex.done"
               fi
            fi

         elif [ "$cli" = "1" ]; then
            if [ -f "/var/run/msgcollector/${identifier}.waitmessagecli.done" ]; then
               if [ -f "/var/run/msgcollector/${identifier}.waitmessagecli" ]; then
                  msg="$(cat "/var/run/msgcollector/${identifier}.waitmessagecli")"
                  type="$(cat "/var/run/msgcollector/${identifier}.typecli")"
                  dispatch_cli "$msg"
                  rm --force "/var/run/msgcollector/${identifier}.waitmessagecli.done"
                  rm --force "/var/run/msgcollector/${identifier}.waitmessagecli"
               else
                  rm --force "/var/run/msgcollector/${identifier}.waitmessagecli.done"
               fi
            fi
            if [ -f "/var/run/msgcollector/${identifier}.messagecli.done" ]; then
               if [ -f "/var/run/msgcollector/${identifier}.messagecli" ]; then
                  msg="$(cat "/var/run/msgcollector/${identifier}.messagecli")"
                  type="$(cat "/var/run/msgcollector/${identifier}.typecli")"
                  dispatch_cli "$msg"
                  rm --force "/var/run/msgcollector/${identifier}.messagecli.done"
                  rm --force "/var/run/msgcollector/${identifier}.messagecli"
               else
                  rm --force "/var/run/msgcollector/${identifier}.messagecli.done"
               fi
            fi
         else
            exit 1
         fi
      done
      sleep 1 &
      wait "$!"
   done
}

parse_cmd_options ${1+"$@"}
write_own_pid
source /usr/lib/msgcollector/msgwmctrl
fallbacks ## provided by /usr/lib/msgcollector/msgwmctrl
main_function
