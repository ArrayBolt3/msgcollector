#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
#trap 'sleep 1' DEBUG
set -o pipefail

scriptname="$(basename "$BASH_SOURCE")"

error_handler() {
   local exit_code="$?"
   if [ ! "$1" = "" ]; then
      error_text="$1"
   else
      error_text="$BASH_COMMAND"
   fi

   local msg="<p>
<br></br>###############################################################################
<br></br>## $scriptname script bug.
<br></br>## No panic. Nothing is broken. Just some rare condition has been hit.
<br></br>## Try again later. There is likely a solution for this problem.
<br></br>## Please see Whonix News, Whonix Blog and Whonix User Help Forum.
<br></br>## Please report this bug!
<br></br>##
<br></br>## who_ami: $who_ami
<br></br>## msgdispatcher_identifier: $msgdispatcher_identifier
<br></br>## error_text: $error_text
<br></br>## last exit_code: $exit_code
<br></br>###############################################################################</p>"

   ## Popup window with the message above.
   ## /usr/share/icons/anon-icon-pack/whonix.ico might not exist, but
   ## fortunately msgdispatcher_dispatch_x works anyway.
   /usr/lib/msgcollector/msgdispatcher_dispatch_x "warning" "$scriptname" "$msg" "0" "/usr/share/icons/anon-icon-pack/whonix.ico" &

   local stripped_msg
   stripped_msg="$(/usr/lib/msgcollector/striphtml "$msg")"
   if [ "$stripped_msg" = "" ]; then
      ## In case striphtml failed or is not available.
      echo "$msg" >&2
   else
      echo "$stripped_msg" >&2
   fi
   if [ ! -d ~/".msgcollector" ]; then
      mkdir --parents ~/".msgcollector"
   fi
   echo "$scriptname: BASH_COMMAND: $BASH_COMMAND | exit_code: $exit_code" >> ~/".msgcollector/msgdispatcher-error.log"

   true
}

trap "error_handler" ERR

ex_funct() {
   true "$FUNCNAME: Signal $SIGNAL_TYPE received. Cleaning up..."

   if [ ! "$inotifywait_subshell_pid" = "" ]; then
      kill -s sigterm "$inotifywait_subshell_pid" || true
   fi

   if [ -f "$pid_file" ]; then
      rm --force "$pid_file"
   fi
   if [ -f "$inotifywait_subshell_fifo" ]; then
      rm --force "$inotifywait_subshell_fifo"
   fi

   true "$FUNCNAME: Signal $SIGNAL_TYPE received. Exiting."

   exit "$EXIT_CODE"
}

trap_sighup() {
   set -x
   true
   exit 0
}

trap "trap_sighup" SIGHUP

trap_sigterm() {
   trap "error_handler" ERR

   SIGNAL_TYPE="SIGTERM"
   EXIT_CODE="143"
   ex_funct
}

trap "trap_sigterm" SIGTERM

trap_sigint() {
   trap "error_handler" ERR

   SIGNAL_TYPE="SIGINT"
   EXIT_CODE="130"
   ex_funct
}

trap "trap_sigint" SIGINT ## ctrl + c

parse_cmd_options() {
   trap "error_handler" ERR

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while true; do
       case $1 in
           --verbose)
               set -x
               verbose="1"
               shift
               ;;
           --cli)
               cli="1"
               shift
               ;;
           --x)
               x="1"
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$scriptname unknown option: $type" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done
}

preparation() {
   trap "error_handler" ERR

   ## Sanity test.
   command -v flock >/dev/null 2>/dev/null

   who_ami="$(whoami)"

   if [ "$cli" = "1" ]; then
      pid_file="/var/run/msgcollector/$who_ami/msgdispatcher_pidcli"
      lock_file="/var/run/msgcollector/$who_ami/msgdispatcher_cli_lock"
      inotifywait_subshell_fifo="/var/run/msgcollector/$who_ami/msgdispatcher_cli_subshell_fifo"
      inotifywait_success_file="/var/run/msgcollector/$who_ami/msgdispatcher_cli_inotifywait_success"
   elif [ "$x" = "1" ]; then
      pid_file="/var/run/msgcollector/$who_ami/msgdispatcher_pidx"
      lock_file="/var/run/msgcollector/$who_ami/msgdispatcher_x_lock"
      inotifywait_subshell_fifo="/var/run/msgcollector/$who_ami/msgdispatcher_x_subshell_fifo"
      inotifywait_success_file="/var/run/msgcollector/$who_ami/msgdispatcher_x_inotifywait_success"
   else
      echo "$$" > "/var/run/msgcollector/$who_ami/msgdispatcher_piderror"
      exit 3
   fi

   ## Care for race condition.
   #if [ -f "$inotifywait_success_file" ]; then
      #rm --force "$inotifywait_success_file"
   #fi

   inotifywait_folder="/var/run/msgcollector"

   if [ ! -d "/var/run/msgcollector/$who_ami" ]; then
      mkdir --parents "/var/run/msgcollector/$who_ami"
   fi

   delete_wrapper="/usr/lib/msgcollector/msgdispatcher_delete_wrapper"
}

write_own_pid() {
   trap "error_handler" ERR

   local subshell_pid wait_exit_code msgdispatcher_pid
   msgdispatcher_pid="$$"

   (
      trap "error_handler" ERR
      flock_exit_code="0"
      flock --nonblock --exclusive 200 || { flock_exit_code="$?" ; true; };
      true "$scriptname $FUNCNAME (subshell) (pid: $$): lock_file: $lock_file | flock_exit_code: $flock_exit_code"

      if [ -f "$pid_file" ]; then
         true "$scriptname $FUNCNAME (subshell) (pid: $$): pid file $pid_file already exists."
         pid="$(cat "$pid_file")" || true
         true "$scriptname $FUNCNAME (subshell) (pid: $$): pid file $pid_file contains pid: $pid"
         if [ ! "$pid" = "" ]; then
            kill_exit_code="0"
            kill -0 "$pid" || { kill_exit_code="$?" ; true; };
            if [ "$kill_exit_code" = "0" ]; then
               true "$scriptname $FUNCNAME (subshell) (pid: $$): msgdispatcher with pid $pid already running."
               exit 1
            else
              true "$scriptname $FUNCNAME (subshell) (pid: $$): msgdispatcher with pid $pid not running."
            fi
         fi
      fi

      if [ "$flock_exit_code" = "0" ]; then
         true "$scriptname $FUNCNAME (subshell) (pid: $$): writing msgdispatcher_pid $msgdispatcher_pid to pid_file $pid_file."
         echo "$msgdispatcher_pid" > "$pid_file"
      else
         true "$scriptname $FUNCNAME (subshell) (pid: $$): Could not acquire lock."
         exit 2
      fi
   ) 200>"$lock_file" &

   subshell_pid="$!"

   wait_exit_code="0"
   wait "$subshell_pid" || { wait_exit_code="$?" ; true; };

   if [ ! "$wait_exit_code" = "0" ]; then
      true "$scriptname $FUNCNAME (pid: $$): Subshell exit code: $wait_exit_code. Exiting."
      exit 0
   else
      true "$scriptname $FUNCNAME (pid: $$): Acquire lock ok."
   fi
}

## {{ Small wrapper to use either kdialog, notify-send or nothing.
passive_popup_tool() {
   trap "error_handler" ERR

   local time title text
   time="$1"
   title="$2"
   text="$3"

   ## Fallback.
   ## notify-send does not work if $title is unset.
   if [ "$title" = "" ]; then
      title="$msgdispatcher_identifier"
   fi

   ## notify-send timeout in milliseconds.

   if command -v "qubesdb-read" >/dev/null 2>&1 ; then
      if command -v "notify-send" >/dev/null 2>&1 ; then
         notify-send --expire-time "${time}000" "$title" "$text"
         return 0
      fi
   fi

   ## check if kdialog, notify-send or no passive popup tool is installed
   ## - that is not the case for CLI Custom-Workstation users
   ## - that may not be the case for Gnome users
   if command -v "kdialog" >/dev/null 2>&1 ; then
      kdialog --title "$title" --passivepopup "$text" "$time"
   elif command -v "notify-send" >/dev/null 2>&1 ; then
      notify-send --expire-time "${time}000" "$title" "$text"
   fi
}
## }}

dispatch_cli() {
   trap "error_handler" ERR

   local msg
   msg="$1"

   if [ -f "/var/run/msgcollector/$who_ami/${msgdispatcher_identifier}_parenttty" ]; then
      local parenttty
      parenttty="$(cat "/var/run/msgcollector/$who_ami/${msgdispatcher_identifier}_parenttty")"
      if [ "$parenttty" = "/dev/tty1" ]; then
         ## When for example whonixcheck was run in tty1, then messages were
         ## already echoed by msgcollector. No need to dispatch them again.
         true "Skipping, because parenttty is /dev/tty1."
         return 0
      fi
   fi

   echo "$msg"
}

dispatch_x_active() {
   trap "error_handler" ERR

   if [ -f "/var/run/msgcollector/$who_ami/${msgdispatcher_identifier}_lefttop" ]; then
      local lefttop
      lefttop="1"
   fi

   local icon
   if [ -f "/var/run/msgcollector/$who_ami/${msgdispatcher_identifier}_icon" ]; then
      icon="$(cat "/var/run/msgcollector/$who_ami/${msgdispatcher_identifier}_icon")"
   else
      ## Fallback.
      if [ -f "/usr/share/icons/anon-icon-pack/whonix.ico" ]; then
         icon="/usr/share/icons/anon-icon-pack/whonix.ico"
      else
         icon=""
      fi
   fi

   ## Fallback.
   if [ "$type" = "" ]; then
      type="info"
   fi

   if [ "$verbose" = "1" ]; then
      /usr/lib/msgcollector/msgdispatcher_dispatch_x "$type" "$title" "$msg" "$lefttop" "$icon"
   else
      ## Launching into background, so it doesn't block msgdispatcher until
      ## msgdispatcher_dispatch_x exits.
      /usr/lib/msgcollector/msgdispatcher_dispatch_x "$type" "$title" "$msg" "$lefttop" "$icon" &
   fi
}

dispatch_x_passive() {
   trap "error_handler" ERR

   passive_popup_tool "20" "$title" "$msg"
}

inotifywait_setup() {
   trap "error_handler" ERR

   if [ ! "$inotifywait_subshell_pid" = "" ]; then
      kill -s sigterm "$inotifywait_subshell_pid" || true
   fi

   rm --force "$inotifywait_subshell_fifo"
   mkfifo "$inotifywait_subshell_fifo"

   {
      inotifywait_subshell_error_handler() {
         local exit_code="$?"
         if [ ! "$1" = "" ]; then
            error_text="exit_code: $exit_code | text: $1"
         else
            error_text="exit_code: $exit_code | BASH_COMMAND: $BASH_COMMAND"
         fi
         rm --force "$inotifywait_success_file"
         error_handler "$error_text"
         exit 1
      }

      trap "inotifywait_subshell_error_handler" ERR

      inotifywait_subshell_trap_sigterm() {
         trap "error_handler" ERR
         true "$FUNCNAME: signal SIGTERM received. Cleaning up..."
         if [ ! "$inotifywait_pid" = "" ]; then
            kill -s sigterm "$inotifywait_pid"
         fi
         rm --force "$inotifywait_success_file"
         true "$FUNCNAME: signal SIGTERM received. Exiting."
         exit 143
      }

      trap "inotifywait_subshell_trap_sigterm" SIGTERM

      inotifywait --quiet --recursive --monitor --event create --format "%w%f" "$inotifywait_folder" &
      inotifywait_pid="$!"
      touch "$inotifywait_success_file"
      wait_exit_code="0"
      ## Should wait forever.
      wait "$inotifywait_pid" || { wait_exit_code="$?" ; true; };
      inotifywait_subshell_error_handler "Failed to set up inotifywait! inotifywait_folder: $inotifywait_folder | wait_exit_code: $wait_exit_code"
      exit "$wait_exit_code"
   } > "$inotifywait_subshell_fifo" &

   inotifywait_subshell_pid="$!"
   true "$scriptname $FUNCNAME (pid: $$): Started subshell for inotify with pid: $inotifywait_subshell_pid"
}

parse_existing_files() {
   trap "error_handler" ERR

   ## Prevent race condition while inotifywait might not be started yet.
   sleep "2" &
   wait "$!"

   for folder_name in "$inotifywait_folder/"*; do
      for file_name in "$folder_name/"*; do
         msgdispatcher_handler
      done
   done
}

msgdispatcher_handler() {
   trap "error_handler" ERR

   true "PROCESSING file_name: $file_name"
   file_extension="${file_name##*_}"
   if [ ! "$file_extension" = "done" ]; then
      return 0
   fi

   arrIN=(${file_name//// })
   msgdisptacher_username="${arrIN[3]}"

   ## Remove "_done".
   temp_item="${file_name%%_*}"
   ## Remove "/var/run/msgcollector/$msgdisptacher_username/".
   msgdispatcher_identifier="${temp_item##*/}"

   if [ "$x" = "1" ]; then
      if [ "$file_name" = "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_messagex_done" ]; then
         if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_messagex" ]; then
            msg="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_messagex")"
            title="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_titlex")"
            type="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_typex")"
            dispatch_x_active "$type" "$msg"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="messagex_done" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="titlex" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="messagex" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="lefttop" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="typex" "$delete_wrapper"
         else
            ## Not using rm outside the if, to prevent race conditions.
            ## Not always using rm, without if to prevent forking.
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="messagex_done" "$delete_wrapper"
         fi
         return 0
      fi
      if [ "$file_name" = "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_passivepopupqueuex_done" ]; then
         if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_passivepopupqueuex" ]; then
            msg="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_passivepopupqueuex")"
            title="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_passivepopupqueuextitle")"
            ## TODO: do not use "_typex" to avoid conflicts with "messagex_done".
            #type="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_typex")"
            type="info"
            if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_forceactive" ]; then
               ## TODO: --forceactive not yet implemented.
               #dispatch_x_active "$type" "$msg"
               dispatch_x_passive "$type" "$title" "$msg"
            else
               dispatch_x_passive "$type" "$title" "$msg"
            fi
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="forceactive" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="passivepopupqueuex_done" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="passivepopupqueuex" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="passivepopupqueuextitle" "$delete_wrapper"
         else
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="passivepopupqueuex_done" "$delete_wrapper"
         fi
         return 0
      fi

      last_two="${file_name#*_*_}"
      if [ "$last_two" = "progressbarx_done" ]; then
         first_two="${file_name%_*_*}"
         ## first_two example:
         ## /var/run/msgcollector/whonixcheck/whonixcheck_2b3916d6-3b3f-4490-bc85-b97da494a55d
         progressbaridx=${first_two#*_}
         ## progressbaridx example:
         ## 2b3916d6-3b3f-4490-bc85-b97da494a55d
         if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_${progressbaridx}_progressbarx" ]; then
            if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_${progressbaridx}_progressbarx_animate" ]; then
               sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="${progressbaridx}_progressbarx_animate" "$delete_wrapper"
               animate="--animate"
            else
               unset animate
            fi
            if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_${progressbaridx}_progressbartitlex" ]; then
               local progressbartitlex
               progressbartitlex="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_${progressbaridx}_progressbartitlex")"
            fi
            if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_${progressbaridx}_progressbarx" ]; then
               progressbarx="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_${progressbaridx}_progressbarx")"
            fi
            ## TODO: parentpid
            if [ "$verbose" = "1" ]; then
               echo "running: /usr/lib/msgcollector/msgprogressbar --identifier $msgdispatcher_identifier --whoami $msgdisptacher_username --progressbaridx ${progressbaridx} --progressbartitlex $progressbartitlex --progressbarx $progressbarx --verbose $animate"
               if [ "$vverbose" = "1" ]; then
                  extra_bash="bash -x"
               else
                  extra_bash=""
               fi
               $extra_bash /usr/lib/msgcollector/msgprogressbar --identifier "$msgdispatcher_identifier" --whoami "$msgdisptacher_username" --progressbaridx "${progressbaridx}" --progressbartitlex "$progressbartitlex" --progressbarx "$progressbarx" --verbose $animate
            else
               /usr/lib/msgcollector/msgprogressbar --identifier "$msgdispatcher_identifier" --whoami "$msgdisptacher_username" --progressbaridx "${progressbaridx}" --progressbartitlex "$progressbartitlex" --progressbarx "$progressbarx" $animate &
            fi
            unset animate
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="${progressbaridx}_progressbarx_done" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="${progressbaridx}_progressbartitlex" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="${progressbaridx}_progressbarx" "$delete_wrapper"
         else
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="${progressbaridx}_progressbarx_done" "$delete_wrapper"
         fi
         return 0
      fi

   elif [ "$cli" = "1" ]; then
      if [ "$file_name" = "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_waitmessagecli_done" ]; then
         if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_waitmessagecli" ]; then
            msg="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_waitmessagecli")"
            type="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_typecli")"
            dispatch_cli "$msg"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="waitmessagecli_done" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="waitmessagecli" "$delete_wrapper"
         else
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="waitmessagecli_done" "$delete_wrapper"
         fi
         return 0
      fi
      if [ "$file_name" = "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_messagecli_done" ]; then
         if [ -f "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_messagecli" ]; then
            msg="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_messagecli")"
            type="$(cat "/var/run/msgcollector/$msgdisptacher_username/${msgdispatcher_identifier}_typecli")"
            dispatch_cli "$msg"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="messagecli_done" "$delete_wrapper"
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="messagecli" "$delete_wrapper"
         else
            sudo --non-interactive msgdisptacher_username="$msgdisptacher_username" msgdispatcher_identifier="$msgdispatcher_identifier" msgdispatcher_appendix="messagecli_done" "$delete_wrapper"
         fi
         return 0
      fi
   else
      exit 1
   fi
}

inotifywait_loop() {
   trap "error_handler" ERR

   true "$scriptname $FUNCNAME (pid: $$): Starting loop."

   local msgdispatcher_identifier temp_item last_two first_two progressbaridx

   while read -r file_name; do
      msgdispatcher_handler
   done < "$inotifywait_subshell_fifo"
}

msgdispatcher_loop() {
   trap "error_handler" ERR
   while true; do
      maybe_wait
      preparation
      write_own_pid
      fallbacks ## provided by /usr/lib/msgcollector/msgwmctrl
      inotifywait_setup
      parse_existing_files
      inotifywait_loop
      sleep 10 &
      wait "$!"
   done
}

source /usr/lib/msgcollector/msgcollector_shared
source /usr/lib/msgcollector/msgwmctrl

parse_cmd_options "$@"
msgdispatcher_loop
