#!/usr/bin/python3 -u
# -*- coding: utf-8 -*-

## Copyright (C) 2014 troubadour <trobador@riseup.net>
## Copyright (C) 2014 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QPixmap

import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

class GuiMessage(QtWidgets.QDialog):
    def __init__(self):
        super(GuiMessage, self).__init__()
        self.setup_ui()

    def setup_ui(self):
        try:
            itype = str(sys.argv[1])
            title = str(sys.argv[2])
            message = str(sys.argv[3])
            question = str(sys.argv[4])
            self.button = str(sys.argv[5])

        except (IndexError) as e:
            sys.exit('Arguments parsing error')

        itype = "/usr/share/icons/oxygen/base/64x64/status/dialog-information.png"

        if str(sys.argv[1]) == "warning":
            itype = "/usr/share/icons/oxygen/base/64x64/status/dialog-warning.png"

        elif str(sys.argv[1]) == "error":
            itype = "/usr/share/icons/oxygen/base/64x64/status/dialog-error.png"

        message = message + '<p>' + question + '</p>'

        self.gridLayout = QtWidgets.QGridLayout(self)

        # We use QTextBrowser with a white background.
        # Set a default (transparent) background.
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(244, 244, 244))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.setPalette(palette)

        self.setWindowIcon(QIcon("/usr/share/icons/icon-pack-dist/whonix.ico"))
        self.setWindowTitle(title)

        self.label = QtWidgets.QLabel(self)
        image = QtGui.QImage(itype)
        self.label.setPixmap(QPixmap.fromImage(image))
        #self.Info_Icon.setPixmap(QPixmap.fromImage(image))

        self.label.setAlignment(QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.gridLayout.addWidget(self.label, 0, 0)

        self.text = QtWidgets.QTextBrowser(self)
        self.text.setMinimumSize(535, 0)
        self.text.setAlignment(QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.text.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.text.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse|QtCore.Qt.TextSelectableByMouse)
        self.text.setOpenExternalLinks(True)
        self.text.setText(message)
        self.gridLayout.addWidget(self.text, 0, 1)

        self.buttonBox = QtWidgets.QDialogButtonBox(self)
        if self.button == 'yesno':
            self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Yes|QtWidgets.QDialogButtonBox.No)

            self.yes_button = self.buttonBox.button(QtWidgets.QDialogButtonBox.Yes)
            self.yes_button.clicked.connect(self.yes_pressed)

            self.no_button = self.buttonBox.button(QtWidgets.QDialogButtonBox.No)
            self.no_button.setAutoDefault(True)
            self.no_button.setDefault(True)
            self.no_button.clicked.connect(self.reject)

        elif self.button == 'ok':
            self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok)
            self.ok_button = self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok)
            self.ok_button.clicked.connect(self.accept)

        self.gridLayout.addWidget(self.buttonBox, 1, 1)

        #self.center()
        QtCore.QTimer.singleShot(0, self.setSize)

        self.exec_()

    def setSize(self):
        ## Size is returned
        messageHeight = int(self.text.document().size().height())
        maximumHeight = int(QtWidgets.QDesktopWidget().availableGeometry().height() - 60)
        if messageHeight <= maximumHeight:
            self.resize(620, messageHeight + 60)
            self.center()
            if self.button == 'yesno':
                self.no_button.setFocus()
            elif self.button == 'ok':
                self.ok_button.setFocus()

        else:
            self.resize(620, maximumHeight)
            self.center()
            if self.button == 'yesno':
                self.no_button.setFocus()
            elif self.button == 'ok':
                self.ok_button.setFocus()

    def center(self):
       frameGm = self.frameGeometry()
       centerPoint = QtWidgets.QDesktopWidget().availableGeometry().center()
       frameGm.moveCenter(centerPoint)
       self.move(frameGm.topLeft())

    def yes_pressed(self):
        print("16384")
        sys.exit()

    def reject(self):
        print("65536")
        sys.exit()

def main():
    app = QtWidgets.QApplication(sys.argv)
    message = GuiMessage()
    sys.exit()

if __name__ == '__main__':
    main()
