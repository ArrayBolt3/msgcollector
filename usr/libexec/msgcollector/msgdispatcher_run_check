#!/bin/bash

## Copyright (C) 2012 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

msgdispatcher_pid_check() {
   if [ "cli" = "$1" ]; then
      ## msgcollector-cli.service does not exist yet. For now, it's the same systemd unit file.
      if &>/dev/null systemctl --no-pager --no-block --user is-active msgcollector-gui.service ; then
         return 0
      else
         return 1
      fi
   elif [ "gui" = "$1" ]; then
      if &>/dev/null systemctl --no-pager --no-block --user is-active msgcollector-gui.service ; then
         return 0
      else
         ## TODO: Prevents "systemcheck --gui" to write msgcollector gui status files.
         return 1
      fi
   else
      error "$FUNCNAME: neither cli nor gui!"
   fi
}

msgdispatcher_run_check() {
   source /usr/libexec/msgcollector/msgcollector_shared
   ## sets: ${msgcollector_run_dir}
   folder_init

   ## systemcheck sets GUI / CLI variables
   if [ "$GUI" = "true" ]; then
      if msgdispatcher_pid_check "gui" ; then
         msgdispatcher_running_x="true"
      fi
   fi
   if [ "$CLI" = "true" ]; then
      if msgdispatcher_pid_check "cli" ; then
         msgdispatcher_running_cli="true"
      fi
   fi
}

msgdispatcher_init() {
   #arg_max_bytes="$(getconf ARG_MAX)"
   arg_max_bytes=138300

   output_tool="/usr/libexec/msgcollector/msgcollector"
   output_general="output_func_general"
   output_x="output_func_x"
   output_cli="output_func_cli"
   msgdispatcher_wait
}

msgdispatcher_wait() {
   while true; do
      if [ "$msgdispatcher_running_x" = "true" ] || [ "$msgdispatcher_running_cli" = "true" ]; then
         break
      fi
      msgdispatcher_run_check
      #loop_protection
      break
   done
}

output_func_general() {
   output_func "$@"
   return "$?"
}

output_func_x() {
   if [ "$msgdispatcher_running_x" = "true" ]; then
      output_func "$@"
      return "$?"
   fi
   true "$0: $FUNCNAME: skipping because msgdispatcher_running_x is not set to true."
}

output_func_cli() {
   if [ "$msgdispatcher_running_cli" = "true" ]; then
      output_func "$@"
      return "$?"
   fi
   true "$FUNCNAME: injecting --onlyecho."
   output_func --onlyecho "$@"
}

output_func() {
   local output_text arg arg_count arg_string_length too_many_args too_many_bytes debug_information
   output_text=( "$@" )

   true "arg_count: $arg_count"

   ## set arg_string_length with shorter xtrace.
   {
      local arg_string_length=0
      for arg in "${output_text[@]}"; do
         (( arg_string_length += ${#arg} + 1 ))
      done
   } 2>/dev/null

   too_many_args=false
   too_many_bytes=false

   true "arg_string_length: $arg_string_length"
   true "arg_max_bytes    : $arg_max_bytes"

   if (( arg_string_length >= arg_max_bytes )); then
      too_many_bytes=true
      true "WARNING: ARG_MAX bytes exceeded: $arg_string_length >= $arg_max_bytes"
   fi

   ## safe conservative default
   local arg_limit=4096
   true "arg_count: $arg_count"
   true "arg_limit: $arg_limit"
   if (( arg_count >= arg_limit )); then
      too_many_args=true
      true "WARNING: Too many arguments: $arg_count >= $arg_limit"
   fi

   if [[ "$too_many_args" == true || "$too_many_bytes" == true ]]; then
      # Remove last param (presumed to be error message string)
      unset "output_text[${#output_text[@]}-1]"

      debug_information="\
${FUNCNAME[0]} was called with too many arguments.
arg_count         : $arg_count
arg_string_length : $arg_string_length
arg_limit         : $arg_limit
arg_max_bytes     : $arg_max_bytes
\${FUNCNAME[0]}: ${FUNCNAME[0]}
\${FUNCNAME[1]}: ${FUNCNAME[1]}
\${FUNCNAME[2]}: ${FUNCNAME[2]}
\${FUNCNAME[3]}: ${FUNCNAME[4]}
\${FUNCNAME[5]}: ${FUNCNAME[5]}
\${FUNCNAME[6]}: ${FUNCNAME[6]}
\$0: $0" || true

      output_text+=("ERROR: ARG_MAX or argument count exceeded!

debug information:
$debug_information")
   fi

   #true before: "$@ BEFORE"
   #true after : "${output_text[@]} AFTER"

   if [ "$output_func_verbose" = "true" ]; then
      echo "Running: bash -x $output_tool --identifier $IDENTIFIER ${1+$@}"
      bash -x $output_tool --identifier "$IDENTIFIER" "${output_text[@]}"
   else
      $output_tool --identifier "$IDENTIFIER" "${output_text[@]}"
   fi

   return "$?"
}
